// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

model User {
  id String @id @default(cuid())

  email_address String @unique
  username      String @unique

  name                  String
  affiliation           String
  contact_email_address String
  website               String

  created DateTime @default(now())

  Access       Access[]
  Notification Notification[]

  @@index([email_address, username])
}

model Notification {
  id String @id @default(cuid())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  title   String @default("")
  content String @default("")

  target String @default("https://sciconnect.io")

  read Boolean @default(false)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@index([user_id])
}

model Access {
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  workspace    Workspace @relation(fields: [workspace_id], references: [id])
  workspace_id String

  role String @default("owner") // owner | admin | editor | viewer

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@id([user_id, workspace_id])
}

model Invite {
  email_address String

  workspace    Workspace @relation(fields: [workspace_id], references: [id])
  workspace_id String

  role String @default("viewer") // admin | editor | viewer

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@id([email_address, workspace_id])
}

model Workspace {
  id String @id // will use nanoID/custom id for this

  title       String @default("")
  description String @default("")

  created DateTime @default(now())
  updated DateTime @updatedAt

  Collections Collection[]
  Invites     Invite[]
  Access      Access[]
}

model Collection {
  id String @id @default(cuid())

  title       String @default("")
  description String @default("")
  image       String @default("https://api.dicebear.com/6.x/shapes/svg")

  created DateTime @default(now())

  identifier String @unique // might use a link shortener for this (c1234)

  private Boolean @default(false)

  Versions Version[]

  Workspace    Workspace? @relation(fields: [workspace_id], references: [id])
  workspace_id String?

  @@index([identifier])
}

model Version {
  id String @id @default(cuid())

  collection    Collection @relation(fields: [collection_id], references: [id], onDelete: Cascade)
  collection_id String

  name String @default("") // 23.5.30.1 (using calver for this)

  changelog String @default("")

  identifier String @unique // might use a link shortener for this (v1234)

  created DateTime @default(now())
  updated DateTime @updatedAt

  published    Boolean   @default(false)
  published_on DateTime?

  Resources Resource[]

  @@index([identifier, collection_id])
}

model Resource {
  id String @id @default(cuid())

  type   String // doi, url, ror, orcid, etc (prefix from identifiers.org)
  target String // the actual identifier (10.1234/abc)

  title       String @default("")
  description String @default("")

  icon String @default("mdi:resource-description-framework")

  back_link    Resource? @relation("NewVersionRelation", fields: [back_link_id], references: [id])
  back_link_id String?

  action String? // oldVersion | deleted 

  created DateTime @default(now())
  updated DateTime @updatedAt

  Version Version[]

  Resource Resource[] @relation("NewVersionRelation")

  ExternalRelation ExternalRelation[]

  InternalRelationSource InternalRelation[] @relation("SourceRelation")
  InternalRelationTarget InternalRelation[] @relation("TargetRelation")
}

model InternalRelation {
  id String @id @default(cuid())

  source    Resource @relation("SourceRelation", fields: [source_id], references: [id])
  source_id String

  target    Resource @relation("TargetRelation", fields: [target_id], references: [id])
  target_id String

  type          String // isCitedBy, etc 
  resource_type String? // Book, Article, etc

  mirror Boolean @default(false)

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model ExternalRelation {
  id String @id @default(cuid())

  source    Resource @relation(fields: [source_id], references: [id])
  source_id String

  target      String // the actual identifier (10.1234/abc)
  target_type String // doi, url, ror, orcid, etc (prefix from identifiers.org)

  type          String // isCitedBy, etc 
  resource_type String? // Book, Article, etc

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Analytics {
  id String @id @default(cuid())

  identifier String
  type       String // collection, version, link, etc

  created DateTime @default(now())
}
