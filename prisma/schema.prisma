// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

model User {
  id String @id @default(cuid())

  email_address String @unique
  username      String @unique

  name                  String
  affiliation           String
  contact_email_address String
  website               String

  created DateTime @default(now())

  Notification     Notification[]
  WorkspaceMember  WorkspaceMember[]
  CollectionAccess CollectionAccess[]
  Starred          Starred[]

  @@index([email_address, username])
}

model Notification {
  id String @id @default(cuid())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  title   String @default("")
  content String @default("")

  target String @default("https://sciconnect.io")

  read Boolean @default(false)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@index([user_id])
}

model Invite {
  email_address String

  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspace_id String

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@id([email_address, workspace_id])
}

model WorkspaceMember {
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  workspace    Workspace @relation(fields: [workspace_id], references: [id])
  workspace_id String

  owner Boolean @default(false)
  admin Boolean @default(false)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@id([user_id, workspace_id])
}

model Workspace {
  id String @id // will use nanoID/custom id for this

  title       String @default("")
  description String @default("")

  personal Boolean @default(false)

  type String @default("organization") // organization | personal

  created DateTime @default(now())
  updated DateTime @updatedAt

  Collections     Collection[]
  WorkspaceMember WorkspaceMember[]
  Invite          Invite[]
}

model CollectionAccess {
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  Collection    Collection @relation(fields: [collection_id], references: [id], onDelete: Cascade)
  collection_id String

  role String // admin | editor 

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@id([user_id, collection_id])
}

model Collection {
  id String @id @default(cuid())

  title                String @default("")
  description          String @default("")
  detailed_description String @default("")

  image_url String @default("https://api.dicebear.com/6.x/shapes/svg")

  created DateTime @default(now())
  updated DateTime @updatedAt

  identifier String @unique // might use a link shortener for this (c1234)

  private Boolean @default(false) // used to hide the collection from public view
  hidden  Boolean @default(false) // used to hide the collection instead of deleting it in the dashboard

  random_int Int @default(0) // used to maintain order of collections              

  Versions Version[]

  CollectionAccess CollectionAccess[]

  creators Json @default("[]") // [{"creator_name": "Smith, John", "family_name": "Smith", "given_name": "John", "name_type": "personal", "affliation": "University of California, Berkeley", "identifier": "https://orcid.org/0000-0002-1825-0097", "identifier_type": "orcid"}]

  Workspace    Workspace? @relation(fields: [workspace_id], references: [id])
  workspace_id String?
  Starred      Starred[]

  @@index([identifier])
}

model Version {
  id String @id @default(cuid())

  collection    Collection @relation(fields: [collection_id], references: [id], onDelete: Cascade) // Remove the cascading delete
  collection_id String

  name String @default("") // 23.5.30.1 (using calver for this)

  changelog String @default("")

  identifier String @unique // might use a link shortener for this (v1234)

  creators Json @default("[]") // [{"creator_name": "Smith, John", "family_name": "Smith", "given_name": "John", "name_type": "personal", "affliation": "University of California, Berkeley", "identifier": "https://orcid.org/0000-0002-1825-0097", "identifier_type": "orcid"}]

  created DateTime @default(now())
  updated DateTime @updatedAt

  published    Boolean   @default(false)
  published_on DateTime?

  Resources Resource[]

  InternalRelations InternalRelation[]
  ExternalRelations ExternalRelation[]

  @@index([identifier, collection_id])
}

model Resource {
  id String @id @default(cuid())

  identifier_type String // doi, url, ror, orcid, etc (prefix from identifiers.org)
  identifier      String // the actual identifier (10.1234/abc)

  title       String @default("")
  description String @default("")

  resource_type String @default("")

  back_link     Resource? @relation("NewVersionRelation", fields: [back_link_id], references: [id])
  back_link_id  String?
  version_label String?

  original_resource    Resource? @relation("OriginalResourceRelation", fields: [original_resource_id], references: [id])
  original_resource_id String?

  action    String? // oldVersion | delete
  filled_in Boolean @default(false) // all details are not filled in

  created DateTime @default(now())
  updated DateTime @updatedAt

  Version Version[]

  Resource         Resource[] @relation("NewVersionRelation")
  OriginalResource Resource[] @relation("OriginalResourceRelation")

  ExternalRelationSource ExternalRelation[]

  InternalRelationSource InternalRelation[] @relation("SourceRelation")
  InternalRelationTarget InternalRelation[] @relation("TargetRelation")
}

model InternalRelation {
  id String @id @default(cuid())

  original_relation    InternalRelation? @relation("OriginalInternalRelation", fields: [original_relation_id], references: [id])
  original_relation_id String?

  source    Resource @relation("SourceRelation", fields: [source_id], references: [id], onDelete: Cascade)
  source_id String

  target    Resource @relation("TargetRelation", fields: [target_id], references: [id], onDelete: Cascade)
  target_id String

  type          String // isCitedBy, etc 
  resource_type String? // Book, Article, etc

  action String? // delete

  mirror Boolean @default(false)

  created DateTime @default(now())
  updated DateTime @updatedAt

  Version          Version[]
  InternalRelation InternalRelation[] @relation("OriginalInternalRelation")
}

model ExternalRelation {
  id String @id @default(cuid())

  source    Resource @relation(fields: [source_id], references: [id], onDelete: Cascade)
  source_id String

  original_relation    ExternalRelation? @relation("OriginalExternalRelation", fields: [original_relation_id], references: [id])
  original_relation_id String?

  target      String // the actual identifier (10.1234/abc)
  target_type String // doi, url, ror, orcid, etc (prefix from identifiers.org)

  type          String // isCitedBy, etc 
  resource_type String? // Book, Article, etc

  action String? // deleted

  created DateTime @default(now())
  updated DateTime @updatedAt

  Version          Version[]
  ExternalRelation ExternalRelation[] @relation("OriginalExternalRelation")
}

model Analytics {
  id Int @id @default(autoincrement())

  identifier String
  type       String // collection, version, link, etc

  event String @default("") // view, click, etc

  created DateTime @default(now())

  @@index([identifier])
}

model Starred {
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  collection    Collection @relation(fields: [collection_id], references: [id], onDelete: Cascade)
  collection_id String

  created DateTime @default(now())

  @@id([user_id, collection_id])
}
